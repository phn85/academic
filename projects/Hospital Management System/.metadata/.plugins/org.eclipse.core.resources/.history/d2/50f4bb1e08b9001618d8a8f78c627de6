/* <h1>FileName: UserTabController.java</h1>
 * @author	Phanindra Chandraprakash
 * @version	1.0
 * @date	12/02/2016
 * FinalProject: HospitalManagementSystem
 * Description: This is an FXML controller class which manages User page.
 */
package com.controller.Tab;

import com.model.Connect_with_database;
import com.model.Display_message;
import com.model.User;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.PasswordField;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.fxml.Initializable;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.cell.PropertyValueFactory;
import org.apache.commons.validator.routines.EmailValidator;

public class UserTabController implements Initializable {

    private PreparedStatement ps;
    private Statement st;
    private ResultSet rs;
    @FXML
    private TableView<User> userTable;
    @FXML
    private TableColumn userNameColumn;
    @FXML
    private TableColumn userIdColumn;
    @FXML
    private TableColumn userRoleColumn;
    @FXML
    private TableColumn userPasswordColumn;
    @FXML
    private TextField tfSearch;
    @FXML
    private ComboBox<String> cbSearch;
    @FXML
    private TextField tfUserName;
    @FXML
    private PasswordField tfPassword;
    @FXML
    private TextField tfUserId;
    @FXML
    private RadioButton rdBt1;
    @FXML
    private ToggleGroup groupLevel;
    @FXML
    private RadioButton rdBt2;
    @FXML
    private RadioButton rdBt3;
    @FXML
    private Button btAdd;
    @FXML
    private Button btUpdate;
    @FXML
    private Button btDelete;
    
    private ObservableList<User> userData = FXCollections.observableArrayList();
    private String selectedRole;
    private EmailValidator validator = EmailValidator.getInstance();

    /**
     * Initializes the controller class.
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {

        setFieldsDisableStart();
        cbSearchInit();
        getUserDetail();
        initTable();
        rdBt1.setOnAction(e -> selectedRole = "admin");
        rdBt2.setOnAction(e -> selectedRole = "doctor");
        rdBt3.setOnAction(e -> selectedRole = "patient");
    }

    public void cbSearchInit() {
        cbSearch.getItems().addAll("Username", "Role");
        cbSearch.setValue("Username");
    }

    private void getUserDetail() {
        Connection con=null;
        try {
            con=Connect_with_database.createConnection();
            String sql = "SELECT * FROM fp.pchand_user";
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                User user = new User();
                user.setUserid(rs.getInt(1)+"");
                user.setUsername(rs.getString(2));
                user.setRole(rs.getString(3));
                user.setPassword(rs.getString(4));
                userData.add(user);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        finally
        {
            Connect_with_database.closeConnection(con);
        }
    }

    public void initTable() {
        userIdColumn.setCellValueFactory(
                new PropertyValueFactory<>("userid")
        );
        userNameColumn.setCellValueFactory(
                new PropertyValueFactory<>("username")
        );
        userRoleColumn.setCellValueFactory(
                new PropertyValueFactory<>("role")
        );
        userPasswordColumn.setCellValueFactory(
                new PropertyValueFactory<>("password")
        );
        //Create fillter for search field
        FilteredList<User> filteredData = new FilteredList<>(userData, p -> true);
        userTable.setItems(filteredData);
        tfSearch.textProperty().addListener((observable, oldValue, newValue) -> {
            filteredData.setPredicate(user -> {
                // If filter text is empty, display all 
                if (newValue == null || newValue.isEmpty()) {
                    return true;
                }
                
                String lowerCaseFilter = newValue.toLowerCase();

                switch (cbSearch.getValue()) {
                    case "Username":
                        if (user.getUsername().toLowerCase().contains(lowerCaseFilter)) {
                            return true;
                        }
                        break;
                    case "Role":
                            if (user.getRole().toLowerCase().contains(lowerCaseFilter)) {
                                return true;
                            }
                        break;
                    default:
                        return false;
                }
                return false;
            });
        });
        userTable.getSelectionModel().selectedItemProperty().addListener(
                (observable, oldValue, newValue) -> showUserDetails(newValue));
    }

    public void showUserDetails(User user) {
        if (user != null) {
            setFieldsDisable();
            tfUserName.setText(user.getUsername());
            tfPassword.setText(user.getPassword());
            switch (user.getRole()) {
                case "admin":
                    rdBt1.setSelected(true);
                    break;
                case "doctor":
                    rdBt2.setSelected(true);
                    break;
                case "patient":
                    rdBt3.setSelected(true);
                    break;
                    default:
                        System.out.println("role==="+user.getRole());
                        break;
            }
        } else {
            tfUserName.setText("");
            tfUserId.setText("");
            tfPassword.setText("");
        }
    }

    public static boolean isNumeric(String str) {
        try {
            double d = Double.parseDouble(str);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }

    @FXML
    public void handleBtAdd() {
        
       if (tfPassword.getText().equals("")
                || tfUserName.getText().equals("")) 
        {
            Display_message.showError("Error", "All Text Field must be filled!");
        } 
       else if (rdBt1.isSelected() == false && rdBt2.isSelected() == false && rdBt3.isSelected() == false)
        {
         	Display_message.showError("Error", "Please select a user level");
        } 
        else if (isDuplicateName(tfUserName.getText())) 
        {
            Display_message.showError("Error", "Username already taken");
        } 
        else {
            String uname = tfUserName.getText();
            String pass = tfPassword.getText();
            if (rdBt1.isSelected()) {
                selectedRole = "admin";
            } else if (rdBt2.isSelected()) {
                selectedRole = "doctor";
            } else {
                selectedRole = "patient";
            }
            String add = "INSERT INTO fp.pchand_user (username,role,password)";
            add += "VALUES (?, ?, ?)";

            Connection con=null;
        try {
            con=Connect_with_database.createConnection();
                ps = con.prepareStatement(add);
                ps.setString(1, uname);
                ps.setString(2, selectedRole);
                ps.setString(3, pass);
                
                int res=ps.executeUpdate();
                if(res>0)
                {
                    ps.close();
                    String userid=getMaxUserId(con);
                    User user = new User();
            user.setUserid(userid);
                     user.setUsername(uname);
            user.setPassword(pass);
            user.setRole(selectedRole);
            userData.add(user);
            forceRefresh();
            clearData();
                }
                else
                {
                    Display_message.showError("Error", "record inserted Sucessfully!");
                }
            } catch (SQLException ex) {
            	ex.printStackTrace();
            }
        finally
        {
            Connect_with_database.closeConnection(con);
        }
        }
    }
    public String getMaxUserId(Connection con)
    {
        String userId="";
            try {
                String checkAccount = "SELECT max(userid) FROM fp.pchand_user";
                ps = con.prepareStatement(checkAccount);
                rs = ps.executeQuery();
                if (rs.next()) {
                    userId = rs.getInt(1)+"";
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            finally
            {
            try {
                ps.close();
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(PatientTabController.class.getName()).log(Level.SEVERE, null, ex);
            }
                
            }
            return userId;
    }

    @FXML
    public void handleBtUpdate() {
        int selectedIndex = userTable.getSelectionModel().getSelectedIndex();
        if(selectedIndex<0)
        {
            Display_message.showError("Error", "Please select any record!");
        }
        if (tfPassword.getText().equals("")) {
            /*
            Notifications.create().title("Add Error")
                    .text("All Text Field must be filled!")
                    .showError();
*/
            Display_message.showError("Error", "All Text Field must be filled!");
        } 
         else {
            String uname = tfUserName.getText();
            String pass = tfPassword.getText();
            if (rdBt1.isSelected()) {
                selectedRole = "admin";
            } else if (rdBt2.isSelected()) {
                selectedRole = "doctor";
            } else {
                selectedRole = "patient";
            }
            String update = "UPDATE fp.pchand_user SET role = ?,password = ? WHERE userid = ?";
            Connection con=null;
        try {
            con=Connect_with_database.createConnection();
                ps = con.prepareStatement(update);
                ps.setString(1, selectedRole);
                ps.setString(2, pass);
                String selectedUserid = userData.get(selectedIndex).getUserid();
                ps.setInt(3, Integer.parseInt(selectedUserid));
                int res=ps.executeUpdate();
                if(res>0)
                {
                    Display_message.showInformation("Successsful", "Update Successfully");
                    User user = userTable.getSelectionModel().getSelectedItem();
            user.setRole(selectedRole);
            user.setPassword(pass);
            forceRefresh();
                }
                else
                {
                    Display_message.showError("Error", "Record not updated");
                }
            } catch (SQLException ex) {
                Display_message.showError("Exception", "Ooops, there was an exception!");
            }
        finally
        {
            Connect_with_database.closeConnection(con);
        }
           
        }
    }

    @FXML
    public void handleBtNew() {
        
        clearData();
    }
    public void clearData()
    {
        tfPassword.setText("");
        //tfUserId.setText("");
        tfUserName.setDisable(false);
        tfUserName.setText("");
        rdBt1.setSelected(false);
        rdBt2.setSelected(false);
        rdBt3.setSelected(false);
        btAdd.setDisable(false);
        btDelete.setDisable(true);
        btUpdate.setDisable(true);
    }
    public void setFieldsDisable()
    {
        btAdd.setDisable(true);
            btUpdate.setDisable(false);
            btDelete.setDisable(false);
            tfUserName.setDisable(true);
            }
    public void setFieldsDisableStart()
    {
        btAdd.setDisable(true);
            btUpdate.setDisable(true);
            btDelete.setDisable(true);
            tfUserName.setDisable(true);
            
            }
    @FXML
    public void handleBtDelete() {
        int selectedIndex = userTable.getSelectionModel().getSelectedIndex();
        if(selectedIndex<0)
        {
            Display_message.showError("Error", "Please select any record!");
        }
        String selectedUsername = userData.get(selectedIndex).getUsername();
        String detele = "DELETE FROM fp.pchand_user WHERE username = ?";
        Connection con=null;
        try {
            con=Connect_with_database.createConnection();
            ps = con.prepareStatement(detele);
            ps.setString(1, selectedUsername);
            int res=ps.executeUpdate();
            if(res>0)
            {
                Display_message.showInformation("Sucessful", "Record deleted Sucessfully!");
                 userData.remove(selectedIndex);
                 forceRefresh();
            }
            else
            {
                Display_message.showError("Error", "Record not deleted");
            }
            ps.close();
            ps = null;
        } catch (SQLException ex) 
        {
            ex.printStackTrace();
            Display_message.showError("Exception", "OOps, Some Exception occur!");
        }
        finally
        {
         Connect_with_database.closeConnection(con);
        }
       
    }

    public boolean isDuplicateName(String s) {
        return userData.stream().anyMatch((user) -> (s.equals(user.getUsername())));
    }
    /*
    public boolean isValidID(String id) {
                        
        List<String> idList = new ArrayList<>();
        String sql = "SELECT ID FROM APP.Doctor";
        Connection con=null;
        try {
            con=Connect_with_database.createConnection();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                idList.add(rs.getString(1));
            }
            if (st != null) {
                st.close();
            }
            if (rs != null) {
                rs.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        finally
        {
            Connect_with_database.closeConnection(con);
        }
        
        return idList.stream().anyMatch((doctorID) -> (doctorID.equals(id)));
    }*/

    public User getUser(String name) {
        for (User user : userData) {
            if (user.getUsername().equals(name)) {
                return user;
            }
        }
        return null;
    }

    public void forceRefresh() {
        new java.util.Timer().schedule(new java.util.TimerTask() {
            public void run() {
                Platform.runLater(() -> {
                    userTable.getColumns().get(0).setVisible(false);
                    userTable.getColumns().get(0).setVisible(true);
                });
            }
        }, 50);
    }

}
